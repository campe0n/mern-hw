{"ast":null,"code":"// use this to decode a token and get the user's information out of it\nimport decode from \"jwt-decode\"; // create a new class to instantiate for a user\n\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  } // check if user's logged in\n\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  } // check if token is expired\n\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem(\"id_token\");\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem(\"id_token\", idToken);\n    window.location.assign(\"/\");\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem(\"id_token\"); // this will reload the page and reset the state of the application\n\n    window.location.assign(\"/\");\n  }\n\n}\n\nexport default new AuthService();\n\nconst jwt = require(\"jsonwebtoken\");\n\nconst secret = \"mysecret\";\nconst expiration = \"2h\";\nmodule.exports = {\n  authMiddleware: function (req, res, next) {\n    let token = req.query.token || req.headers.authorization;\n\n    if (req.headers.authorization) {\n      token = token.split(\"\").pop().trim();\n    }\n\n    if (!token) {\n      return res.status(400).json({\n        message: \"You have no token! \"\n      });\n    }\n\n    try {\n      const {\n        data\n      } = jwt.verify(token, secret, {\n        maxAge: expiration\n      });\n      req.user = data;\n    } catch {\n      console.log(\"Invalid token\");\n      return res.status(200).json({\n        message: \"Invalid token\"\n      });\n    }\n\n    next();\n  },\n  signToken: function ({\n    username,\n    email,\n    _id\n  }) {\n    const payload = {\n      username,\n      email,\n      _id\n    };\n    return jwt.sign({\n      data: payhload\n    }, secret, {\n      expiresIn: expiration\n    });\n  }\n};","map":{"version":3,"sources":["/home/melvin/Git/mern/client/src/utils/auth.js"],"names":["decode","AuthService","getProfile","getToken","loggedIn","token","isTokenExpired","decoded","exp","Date","now","err","localStorage","getItem","login","idToken","setItem","window","location","assign","logout","removeItem","jwt","require","secret","expiration","module","exports","authMiddleware","req","res","next","query","headers","authorization","split","pop","trim","status","json","message","data","verify","maxAge","user","console","log","signToken","username","email","_id","payload","sign","payhload","expiresIn"],"mappings":"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","sourcesContent":["// use this to decode a token and get the user's information out of it\nimport decode from \"jwt-decode\";\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem(\"id_token\");\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem(\"id_token\", idToken);\n    window.location.assign(\"/\");\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem(\"id_token\");\n    // this will reload the page and reset the state of the application\n    window.location.assign(\"/\");\n  }\n}\n\nexport default new AuthService();\n\nconst jwt = require(\"jsonwebtoken\");\n\nconst secret = \"mysecret\";\nconst expiration = \"2h\";\n\nmodule.exports = {\n  authMiddleware: function (req, res, next) {\n    let token = req.query.token || req.headers.authorization;\n\n    if (req.headers.authorization) {\n      token = token.split(\"\").pop().trim();\n    }\n\n    if (!token) {\n      return res.status(400).json({ message: \"You have no token! \" });\n    }\n\n    try {\n      const { data } = jwt.verify(token, secret, { maxAge: expiration });\n      req.user = data;\n    } catch {\n      console.log(\"Invalid token\");\n      return res.status(200).json({ message: \"Invalid token\" });\n    }\n\n    next();\n  },\n  signToken: function ({ username, email, _id }) {\n    const payload = { username, email, _id };\n\n    return jwt.sign({ data: payhload }, secret, { expiresIn: expiration });\n  },\n};\n"]},"metadata":{},"sourceType":"module"}