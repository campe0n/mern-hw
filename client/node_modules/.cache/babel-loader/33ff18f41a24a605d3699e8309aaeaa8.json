{"ast":null,"code":"const jwt = require(\"jsonwebtoken\");\n\nconst secret = \"mysecret\";\nconst expiration = \"2h\";\nmodule.exports = {\n  authMiddleware: function (req, res, next) {\n    let token = req.query.token || req.headers.authorization;\n\n    if (req.headers.authorization) {\n      token = token.split(\"\").pop().trim();\n    }\n\n    if (!token) {\n      return res.status(400).json({\n        message: \"You have no token! \"\n      });\n    }\n\n    try {\n      const {\n        data\n      } = jwt.verify(token, secret, {\n        maxAge: expiration\n      });\n      req.user = data;\n    } catch {\n      console.log(\"Invalid token\");\n      return res.status(200).json({\n        message: \"Invalid token\"\n      });\n    }\n\n    next();\n  },\n  signToken: function ({\n    username,\n    email,\n    _id\n  }) {\n    const payload = {\n      username,\n      email,\n      _id\n    };\n    return jwt.sign({\n      data: payload\n    }, secret, {\n      expiresIn: expiration\n    });\n  }\n};","map":{"version":3,"sources":["/home/melvin/Git/mern/client/src/utils/auth.js"],"names":["jwt","require","secret","expiration","module","exports","authMiddleware","req","res","next","token","query","headers","authorization","split","pop","trim","status","json","message","data","verify","maxAge","user","console","log","signToken","username","email","_id","payload","sign","expiresIn"],"mappings":"AAAA,MAAMA,GAAG,GAAGC,OAAO,CAAC,cAAD,CAAnB;;AAEA,MAAMC,MAAM,GAAG,UAAf;AACA,MAAMC,UAAU,GAAG,IAAnB;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,cAAc,EAAE,UAAUC,GAAV,EAAeC,GAAf,EAAoBC,IAApB,EAA0B;AACxC,QAAIC,KAAK,GAAGH,GAAG,CAACI,KAAJ,CAAUD,KAAV,IAAmBH,GAAG,CAACK,OAAJ,CAAYC,aAA3C;;AAEA,QAAIN,GAAG,CAACK,OAAJ,CAAYC,aAAhB,EAA+B;AAC7BH,MAAAA,KAAK,GAAGA,KAAK,CAACI,KAAN,CAAY,EAAZ,EAAgBC,GAAhB,GAAsBC,IAAtB,EAAR;AACD;;AAED,QAAI,CAACN,KAAL,EAAY;AACV,aAAOF,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAArB,CAAP;AACD;;AAED,QAAI;AACF,YAAM;AAAEC,QAAAA;AAAF,UAAWpB,GAAG,CAACqB,MAAJ,CAAWX,KAAX,EAAkBR,MAAlB,EAA0B;AAAEoB,QAAAA,MAAM,EAAEnB;AAAV,OAA1B,CAAjB;AACAI,MAAAA,GAAG,CAACgB,IAAJ,GAAWH,IAAX;AACD,KAHD,CAGE,MAAM;AACNI,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,aAAOjB,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAArB,CAAP;AACD;;AAEDV,IAAAA,IAAI;AACL,GArBc;AAsBfiB,EAAAA,SAAS,EAAE,UAAU;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,KAAZ;AAAmBC,IAAAA;AAAnB,GAAV,EAAoC;AAC7C,UAAMC,OAAO,GAAG;AAAEH,MAAAA,QAAF;AAAYC,MAAAA,KAAZ;AAAmBC,MAAAA;AAAnB,KAAhB;AAEA,WAAO7B,GAAG,CAAC+B,IAAJ,CAAS;AAAEX,MAAAA,IAAI,EAAEU;AAAR,KAAT,EAA4B5B,MAA5B,EAAoC;AAAE8B,MAAAA,SAAS,EAAE7B;AAAb,KAApC,CAAP;AACD;AA1Bc,CAAjB","sourcesContent":["const jwt = require(\"jsonwebtoken\");\n\nconst secret = \"mysecret\";\nconst expiration = \"2h\";\n\nmodule.exports = {\n  authMiddleware: function (req, res, next) {\n    let token = req.query.token || req.headers.authorization;\n\n    if (req.headers.authorization) {\n      token = token.split(\"\").pop().trim();\n    }\n\n    if (!token) {\n      return res.status(400).json({ message: \"You have no token! \" });\n    }\n\n    try {\n      const { data } = jwt.verify(token, secret, { maxAge: expiration });\n      req.user = data;\n    } catch {\n      console.log(\"Invalid token\");\n      return res.status(200).json({ message: \"Invalid token\" });\n    }\n\n    next();\n  },\n  signToken: function ({ username, email, _id }) {\n    const payload = { username, email, _id };\n\n    return jwt.sign({ data: payload }, secret, { expiresIn: expiration });\n  },\n};\n"]},"metadata":{},"sourceType":"module"}